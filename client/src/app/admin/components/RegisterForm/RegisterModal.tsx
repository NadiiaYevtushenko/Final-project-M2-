import { useState } from 'react';
import { Formik, Form } from 'formik';
import type { FormikHelpers } from 'formik';
import * as Yup from 'yup';
import style from './RegisterModal.module.css';
import FormField from '../RegisterForm/FormField';
import SuccessModal from './SuccessModal';
import { useAuth } from '../../../../app/AuthContext';

const validationSchema = Yup.object({
  firstName: Yup.string().required('–Ü–º º—è –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ').min(2).max(30),
  lastName: Yup.string().required('–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ').min(2).max(30),
  email: Yup.string().required('Email –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π').email('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email'),
  password: Yup.string().required('–ü–∞—Ä–æ–ª—å –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏–π').min(5),
  confirmPassword: Yup.string()
    .required('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ')
    .oneOf([Yup.ref('password')], '–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è'),
});

const initialValues = {
  firstName: '',
  lastName: '',
  email: '',
  password: '',
  confirmPassword: '',
};

type Props = {
  onClose: () => void;
  onSuccess: () => void;
};

const RegisterModal = ({ onClose, onSuccess }: Props) => {
  const [submitted, setSubmitted] = useState(false);
  const { login } = useAuth();
  const [error, setError] = useState('');

  const handleSubmit = async (
    values: typeof initialValues,
    { resetForm }: FormikHelpers<typeof initialValues>
  ) => {
    try {
      // üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
      const registerRes = await fetch('http://localhost:5000/users/api/register', {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(values),
      });

      const registerContentType = registerRes.headers.get('Content-Type') || '';
      if (!registerContentType.includes('application/json')) {
        const raw = await registerRes.text();
        throw new Error('–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON: ' + raw.slice(0, 100));
      }

      const registerData = await registerRes.json();
      if (!registerRes.ok) {
        throw new Error(registerData.message || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
      }

      // üîπ –õ–æ–≥—ñ–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
      const loginRes = await fetch('http://localhost:5000/users/api/login', {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: values.email,
          password: values.password,
        }),
      });

      const loginContentType = loginRes.headers.get('Content-Type') || '';
      if (!loginContentType.includes('application/json')) {
        const raw = await loginRes.text();
        throw new Error('–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É: ' + raw.slice(0, 100));
      }

      const loginData = await loginRes.json();
      if (!loginRes.ok) {
        throw new Error(loginData.message || '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞, –∞–ª–µ –≤—Ö—ñ–¥ –Ω–µ –≤–¥–∞–≤—Å—è');
      }

      // –ü–µ—Ä–µ–¥–∞—î–º–æ user —ñ token (token –º–æ–∂–µ –±—É—Ç–∏ undefined, —è–∫—â–æ –±–µ–∫–µ–Ω–¥ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î)
      login(loginData.user, loginData.token || '');

      resetForm();
      onSuccess();
      setSubmitted(true);
    } catch (err: any) {
      setError(err.message);
    }
  };

  if (submitted) {
    return <SuccessModal onClose={onClose} />;
  }

  return (
    <div className={style.modalOverlay}>
      <div className={style.modal}>
        <button onClick={onClose} className={style.closeBtn} aria-label="–ó–∞–∫—Ä–∏—Ç–∏">√ó</button>
        <h2 className={style.sectionTitle}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>

        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
          validateOnMount
        >
          {({ errors, touched, isValid }) => (
            <Form autoComplete="off">
              <FormField
                name="firstName"
                id="firstName"
                type="text"
                placeholder="–Ü–º º—è *"
                confirmationMessage="–Ü–º º—è –≤–≤–µ–¥–µ–Ω–æ –≤—ñ—Ä–Ω–æ"
                touched={touched.firstName}
                error={errors.firstName}
              />
              <FormField
                name="lastName"
                id="lastName"
                type="text"
                placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ *"
                confirmationMessage="–ü—Ä—ñ–∑–≤–∏—â–µ –≤–≤–µ–¥–µ–Ω–æ –≤—ñ—Ä–Ω–æ"
                touched={touched.lastName}
                error={errors.lastName}
              />
              <FormField
                name="email"
                id="email"
                type="email"
                placeholder="Email *"
                confirmationMessage="Email –≤–∏–≥–ª—è–¥–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ"
                touched={touched.email}
                error={errors.email}
              />
              <FormField
                name="password"
                id="password"
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å *"
                confirmationMessage="–ü–∞—Ä–æ–ª—å –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ"
                touched={touched.password}
                error={errors.password}
              />
              <FormField
                name="confirmPassword"
                id="confirmPassword"
                type="password"
                placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è *"
                confirmationMessage="–ü–∞—Ä–æ–ª—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è"
                touched={touched.confirmPassword}
                error={errors.confirmPassword}
              />

              {error && <div className={style.error}>{error}</div>}

              <button
                type="submit"
                className={style.submitBtn}
                disabled={!isValid}
              >
                –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
              </button>
            </Form>
          )}
        </Formik>
      </div>
    </div>
  );
};

export default RegisterModal;
